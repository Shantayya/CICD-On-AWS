Git: version control system helps to track of code base changes. popular + open source + fst and scalable + heps to collaborate
GitHub: cloud web interface helps to store  and manage code using git.  

git clone <repo url> 	--> cloning repo on local machine
git clone --single-branch --branch branch_name repository_url  	---> clone single branch
git add  --> add to staging area
git commit -m "--" --> add to local repo. record of change
git init  --> used to initialize the project. .git folder contains the staging(blob object) and local repo(commit and tree object) for versioning. 
git config --local(specific to project) or --system or --global(all projects) user.name ""
git config --local(specific to project) or --global(all projects) user.email ""   --> to configure git credentials. credentials stored in .git/config file
git config --list

chached/indexed/staged  --> means same. files are tracked for versioning at staging area.
git rm --cached */specific file 	--> remove all tracked files from cache/stage but keep them in current dir
or 
git restore --staged <filename>		--> unstage files

git status	--> to check file tracking status (1.untracked	2.modified	3.staged	4.unmodified) 

git rm file 	--> removes file from local and staging area
git log master	--> check git commands history

git cat-file -p <commit-hash> 	--> it will show you blob objects 

git switch <commit hash to revert to>	--> revert changes to previous commit. rollback changes but not recommended option


---Branching----
creating new parallel line of develeopment in simple words. 
Branch is a referrence to a commit. branch gets created in .git/refs/head file.
Note: When ever we create new branch, new branch will always points to last commit on master branch. 

	master(12a3hsnxg commit)	master(sn31a5hx commit)
---O-------O------O--------------------O
a.txt	   ↓b.txt d.txt	  	       e.txt	 
  	   O-------O----------O
	   c.txt   f.txt     g.txt	
feature1(9djs12nhd commit)   feature1(1ahsn53ce commit) 

master branch: a.txt		feature branch: a.txt + b.txt
  	       b.txt				c.txt
	       d.txt				f.txt
 	       e.txt				g.txt

git branch				--> show available brances in git
git branch <branch-name>		--> to create new branch
git switch/checkout <branch-name>	--> switch to new branch

gi checkout -b <branch name>		--> create new branch plus checkout to that branch. 

git reset <filename> or get reset	--> reset staged changes	
git reset HEAD~<number>			--> reset commited changes. number of commits to be restored
git reset HEAD~1 --soft			--> restore changes from last commit. here file will be not be unstaged and wil be present in current directory but removed 					from local repo.
git reset HEAD~1 			--> restore changes from last commit. here file will be unstaged  and removed from local repo but wil be present in current 					directory.
git reset HEAD~1 --hard			--> restore changes from last commit. delete file from pwd and staging area. permanent restore. 

git reset <hash>			--> reset multiple commits 
git reflog				--> provides commit hash codes history

---undo reset changes----
git checkout -b <new branch name> <hash>			--> hash code of reset commit
git switch master
git diff feature1						--> shows difference between feature1 and master branch
git merge <new branch name> 
git log

---fast forward merge----
moves head pointer of master branch<target branch> to point to same commits as the feature branch<Source branch>. 
	master(12a3hsnxg commit)	
---O-------O
a.txt	   ↓b.txt 	 
  	   O-------O----------O
	   c.txt   f.txt     g.txt	
feature1(9djs12nhd commit)   feature1(1ahsn53ce commit) 
								master(1ahsn53ce commit)
git checkout master    ----O--------O-----------O-----------O---------O
git merge feature1      a.txt      b.txt      c.txt         f.txt     g.txt


---delete feature branch---
git branch -d feature1		--> make sure you are in diff branch whle executing this command. -D force delete
git checkout -b feature1 <above command hash>		--> to recover deleted feature1 branch


-------3 way merge------
In a three-way merge, Git considers three commits: the common ancestor (the point where the branches diverged), the current branch's commit, and the commit you're merging in.
This process is more complex than a fast-forward merge and involves resolving potential conflicts when changes have occurred in both branches.
It creates a new commit with two parent commits, one from the current branch and one from the branch being merged.

	master(12a3hsnxg commit)	master(sn31a5hx commit)
---O-------O------O--------------------O
a.txt	   ↓b.txt d.txt	  	       e.txt	 
  	   O-------O----------O
	   c.txt   f.txt     g.txt	
feature1(9djs12nhd commit)   feature1(1ahsn53ce commit) 

git branch master
git merge feature1		--> merge the feature1 with master creating 2 parent commits (master commit and feature commit). If b.txt is updated by master and 				feature1 branch then conflict will arise which can be resolved manually while merging feature branch with master. 
conflicts: its an event that takes place when git unable to automatically resolve differences in code between 2 commits.

Note: its better to use merge to integrate changes when 
1. want to preserve original commit history for source and target branch
2. working on shared branches
3. when simplicity and clarity are more important than maintaining a linear history.

----rebase----------
	master(12a3hsnxg commit)	master(sn31a5hx commit)
---O-------O------O--------------------O
a.txt	   ↓b.txt d.txt	  	       e.txt	 
  	   O-------O----------O
	   c.txt   f.txt     g.txt	
feature1(9djs12nhd commit)   feature1(1ahsn53ce commit) 

Rebase: 
allows you to map all the changes happen in new branch below the latest change of main branch. 
Rebase operation allows you to integrate changes from one branch to other by moving or applying series of commits from source branch onto tip of target branch.
advantage: 
1. maintain linear commit history (can drop few commits as well. git rebase -i master)
2. avoid merge commits in history
3. preserve clean and feature based branching model 
4. resolving conflicts in controlled manner (conflicts resolved for each individual commit) 
disadvantage:
1. if you are working on shared branches then it can cause conflicts and confusion for your collabrators. so should be used with caution as it rewrites commit history. 

git branch	--> shows HEAD on feature1 
git rebase master				--> if there is any conflict then need manual intervention
git add <conflict file> 
git rebase --continue
git checkout master
git merge feature1

git rebase <hash> 		--> it will rebase to perticular commit instead onto tip of target commit


------stash-------
stash is a temporary storage area where you can save changes that you have made to current working directory but dont want to commit to the repo yet. Its a handy feature when you want to work on different branch but dont want to loose changs you have made. 

git stash		--> this command stash only tracked files
git stash list		--> list stashed changes
git stash -u		--> u-> --include-untracked. stash tracked + untracked files.
git stash pop		--> retreive stashed changes by deleting files from temp dir.
git stash save -m ""	--> stash change with more descriptive messages
git stash apply		--> retrive stashed changes but do not remove it from stash stack. 
git stash drop 		--> after successfully applied changes if you no longer required them can remove from stash entry. 


---.gitignore-----
use to ignore the files or directories while getting tracked in repo. 
vi .gitignore
*.log
/home/orafmw/info		--> all files in info folder plus .log extension files are being ignored

Note: If we want to ignore already commited files then remove file from cache
git rm -r --cached <filename>


-------collaboration-------
git clone <url>

---clone private repo----
1. repo settings --> add collaborator github account name--> authorize account
2. collborator accepts invitation
3. collaborator execute git clone <repo url> --> authentication pop-up --> click on code login --> will see code 
4. open github.com/login/device  --> put the code from above step and authenticate

tracking branches are local branches representing remote branches. origin is a defualt name for the remote repo URL. 
git branch -r 		--> list remote branches in local
git branch -a		--> list all remote and local branches

git remote add <remote name> <remote URL>		--> add new remote to local. default remote is origin and you can find the same in .git/config file
ex: git remote add origin main				--> if you dont want to repeat origin main everytime(whle pushing) then set upstream using -u (git remote add -u origin main)
git remote -v 						--> verify the remote
git remote rename <remote name>
git remote remove <remote name>		

git remote show origin				--> provides detailed information about remote repo named origin.


-----fetch------
git fetch			--> retrive the changes from remote repo
git fetch --prune		--> deletes remote tracking braches that no longer exist on remote repo without deleting local files from that branch.
git pull			---> fetch + merge(fast forward or three way) 
git pull --rebase		--> same as clone repo and then we commit one by one after that. git pulls changes from repo and then apply local commits one by one after that.

-----push----
git push 						--> push the changes to remote repo
git push --set-upstream(or -u) origin feature1 		--> create feature1 branch in remote repo and push all changes of feature1 to remote repo.  
git push -u origin HEAD:shantayya			--> if remote branch name different from local then use HEAD:remote_branch name to push changes 

pull request(PR)	--> request to review the code before merging into main remote branch 
1. merge		--> create parent commit history 
2. squash and merge	--> combines all commits into one
3. rebase and merge	--> rebase all feature1 commits and then merge with main branch. 

git push origin :feature1	--> to delete feature1 branch from remote repo
git branch -D feature1		--> remove branch from local

-----Devide and Conquer ------
Divide: Instead of making changes directly in the main branch (e.g., master), developers create feature branches to work on specific tasks or features.
Conquer: Each feature branch represents a focused, isolated set of changes. Once the changes are complete and tested, they can be merged back into the main branch.

---forking project-----
allows anyone to contribute to project without having write access. freely experiment with changes without affecting original project. 

Note: Both cloning and forking are mechanisms in Git that allow you to obtain a copy of a repository, but they serve different purposes and are typically used in different scenarios.

git pull 	--> bydefault pull changes from forked repo but if we want to pull changes from original repo then follow below
git remote add upstream <original repo url>
git pull upstream main

draft pull request	--> not intended to merge rather want feedback and discussion on the changes before they are in final state. 


----Branching strategy--------
dev
↓
v1.0.0 (symanic versioning major(significant code change with huge impact. not compatible with previous version)-> minor(new features with little impact)--> patch(bug fixes) number indicates in versioning)
↓
hotfixes V1.0.1
↓
release(pre-prod)
↓
master/main(prod)

git tags		--> tags are referrence to a perticular commit in git history. and it is static. 
1. new artifcats can be created based on specific tag
2. code audit and review
3. used to identify release deployment deployed on env. 
4. used to identify end of sprint or new feature.  

2 types of tag
1. annotated tag		--> includes metadata and comment
git tag -a v1.0.0 hash	-m ""	--> -a shows annotated 
2. lightweight tag		--> does not include anything
git tag v1.0.1





