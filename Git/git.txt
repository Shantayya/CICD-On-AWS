git add  --> add to staging area
git commit -m "--" --> add to local repo
git init  --> used to initialize the project. .git folder contains the staging(blob object) and local repo(commit and tree object) for versioning. 
git config --local(specific to project) or --system or --global(all projects) user.name ""
git config --local(specific to project) or --global(all projects) user.email ""   --> to configure git credentials. credentials stored in .git/config file

chached/indexed/staged  --> means same. files are tracked for versioning at staging area.
git rm --cached */specific file 	--> unstage file
git status	--> to check file tracking status

git rm file --> removes file from local and staging area
git log master	--> check git commands history

git cat-file -p <commit-hash> 	--> it will show you blob objects 

git switch <commit hash to revert to>	--> revert changes to previous commit. rollback changes but not recommended option


---Branching----
Branch is a referrence to a commit. branch gets created in .git/refs/head file.
Note: When ever we create new branch, new branch will always points to last commit on master branch. 

	master(12a3hsnxg commit)	master(sn31a5hx commit)
---O-------O------O--------------------O
a.txt	   ↓b.txt d.txt	  	       e.txt	 
  	   O-------O----------O
	   c.txt   f.txt     g.txt	
feature1(9djs12nhd commit)   feature1(1ahsn53ce commit) 

master branch: a.txt		feature branch: a.txt + b.txt
  	       b.txt				c.txt
	       d.txt				f.txt
 	       e.txt				g.txt

git branch				--> show available brances in git
git branch <branch-name>		--> to create new branch
git switch/checkout <branch-name>	--> switch to new branch

git reset HEAD~<number>			--> number of commits to be restored
git reset HEAD~1 --soft			--> restore changes from last commit. here file will be not be unstaged and wil be present in current directory but removed 					from local repo.
git reset HEAD~1 			--> restore changes from last commit. here file will be unstaged  and removed from local repo but wil be present in current 					directory.
git reset HEAD~1 --hard			--> restore changes from last commit. delete file from pwd and staging area. permanent restore. 


git reflog				--> provides commit hash codes history

---undo reset changes----
git checkout -b <new branch name> <hash>
git witch master
git merge <new branch name> 
git log

---fast forward merge----
moves head pointer of master branch<target branch> to point to same commits as the feature branch<Source branch>. 
	master(12a3hsnxg commit)	
---O-------O
a.txt	   ↓b.txt 	 
  	   O-------O----------O
	   c.txt   f.txt     g.txt	
feature1(9djs12nhd commit)   feature1(1ahsn53ce commit) 
								master(1ahsn53ce commit)
git checkout master    ----O--------O-----------O-----------O---------O
git merge feature1      a.txt      b.txt      c.txt         f.txt     g.txt


---delete feature branch---
git branch -d feature1		--> make sure you are in diff branch whle executing this command. -D force delete
git checkout -b feature1 <above command hash>		--> to recover deleted feature1 branch


-------3 way merge------
	master(12a3hsnxg commit)	master(sn31a5hx commit)
---O-------O------O--------------------O
a.txt	   ↓b.txt d.txt	  	       e.txt	 
  	   O-------O----------O
	   c.txt   f.txt     g.txt	
feature1(9djs12nhd commit)   feature1(1ahsn53ce commit) 

git branch master
git merge feature1		--> merge the feature1 with master creating 2 parent commits (master commit and feature commit). If b.txt is updated by master and 				feature1 branch then conflict will arise which can be resolved manually while merging feature branch with master. 


Note: its better to use merge to integrate changes when 
1. want to preserve original commit history for source and target branch
2. working on shared branches
3. when simplicity and clarity are more important than maintaining a linear history.

----rebase----------
	master(12a3hsnxg commit)	master(sn31a5hx commit)
---O-------O------O--------------------O
a.txt	   ↓b.txt d.txt	  	       e.txt	 
  	   O-------O----------O
	   c.txt   f.txt     g.txt	
feature1(9djs12nhd commit)   feature1(1ahsn53ce commit) 


Rebase operation allows you to integrate changes from one branch to other by moving or applying series of commits from source branch onto tip of target branch.
advantage: 
1. maintain linear commit history (can drop few commits as well. git rebase -i master)
2. avoid merge commits in history
3. preserve clean and feature based branching model 
4. resolving conflicts in controlled manner (conflicts resolved for each individual commit) 
disadvantage:
1. if you are working on shared branches then it can cause conflicts and confusion for your collabrators. so should be used with caution as it rewrites commit history. 

git branch	--> shows HEAD on feature1 
git rebase master				--> if there is any conflict then need manual intervention
git add <conflict file> 
git rebase --continue
git checkout master
git merge feature1

git rebase <hash> 		--> it will rebase to perticular commit instead onto tip of target commit


------stash-------
stash is a temporary storage area where you can save changes that you have made to current working directory but dont want to commit to the repo yet. Its a handy feature when you want to work on different branch but dont want to loose changs you have made. 

git stash		--> this command stash only tracked files
git stash list		--> list stashed changes
git stash -u		--> u-> --include-untracked. stash tracked + untracked files.
git stash pop		--> retreive stashed changes by deleting files from temp dir.
git stash save -m ""	--> stash change with more descriptive messages
git stash apply		--> retrive stashed changes but do not remove it from stash stack. 
git stash drop 		--> after successfully applied changes if you longed required them can remove from stash entry. 




